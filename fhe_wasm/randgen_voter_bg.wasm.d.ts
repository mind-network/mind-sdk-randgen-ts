/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function set_public_key(a: number, b: number): void;
export function get_random_u8(a: number): void;
export function encrypt_u8(a: number, b: number): void;
export function __wbg_tfheconfig_free(a: number, b: number): void;
export function tfheconfigbuilder_default(): number;
export function tfheconfigbuilder_default_with_small_encryption(): number;
export function tfheconfigbuilder_use_custom_parameters(a: number, b: number): number;
export function tfheconfigbuilder_use_dedicated_compact_public_key_parameters(a: number, b: number): number;
export function tfheconfigbuilder_build(a: number): number;
export function fheuint128_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint128_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint128_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint128_decrypt(a: number, b: number, c: number): void;
export function fheuint128_serialize(a: number, b: number): void;
export function fheuint128_deserialize(a: number, b: number, c: number): void;
export function fheuint128_safe_serialize(a: number, b: number, c: number): void;
export function fheuint128_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint128_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint128_decompress(a: number, b: number): void;
export function compressedfheuint128_serialize(a: number, b: number): void;
export function compressedfheuint128_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint128_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint128_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint160_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint160_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint160_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint160_decrypt(a: number, b: number, c: number): void;
export function fheuint160_serialize(a: number, b: number): void;
export function fheuint160_deserialize(a: number, b: number, c: number): void;
export function fheuint160_safe_serialize(a: number, b: number, c: number): void;
export function fheuint160_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint160_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint160_decompress(a: number, b: number): void;
export function compressedfheuint160_serialize(a: number, b: number): void;
export function compressedfheuint160_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint160_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint160_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint256_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint256_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint256_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint256_serialize(a: number, b: number): void;
export function fheuint256_deserialize(a: number, b: number, c: number): void;
export function fheuint256_safe_serialize(a: number, b: number, c: number): void;
export function fheuint256_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint256_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint256_decompress(a: number, b: number): void;
export function compressedfheuint256_serialize(a: number, b: number): void;
export function compressedfheuint256_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint256_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint256_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint512_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint512_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint512_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint512_decrypt(a: number, b: number, c: number): void;
export function fheuint512_serialize(a: number, b: number): void;
export function fheuint512_deserialize(a: number, b: number, c: number): void;
export function fheuint512_safe_serialize(a: number, b: number, c: number): void;
export function fheuint512_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint512_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint512_decompress(a: number, b: number): void;
export function compressedfheuint512_serialize(a: number, b: number): void;
export function compressedfheuint512_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint512_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint512_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint1024_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint1024_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint1024_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint1024_decrypt(a: number, b: number, c: number): void;
export function fheuint1024_serialize(a: number, b: number): void;
export function fheuint1024_deserialize(a: number, b: number, c: number): void;
export function fheuint1024_safe_serialize(a: number, b: number, c: number): void;
export function fheuint1024_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint1024_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint1024_decompress(a: number, b: number): void;
export function compressedfheuint1024_serialize(a: number, b: number): void;
export function compressedfheuint1024_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint1024_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint1024_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint2048_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint2048_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint2048_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint2048_decrypt(a: number, b: number, c: number): void;
export function fheuint2048_serialize(a: number, b: number): void;
export function fheuint2048_deserialize(a: number, b: number, c: number): void;
export function fheuint2048_safe_serialize(a: number, b: number, c: number): void;
export function fheuint2048_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint2048_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint2048_decompress(a: number, b: number): void;
export function compressedfheuint2048_serialize(a: number, b: number): void;
export function compressedfheuint2048_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint2048_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint2048_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint128_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint128_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint128_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint128_decrypt(a: number, b: number, c: number): void;
export function fheint128_serialize(a: number, b: number): void;
export function fheint128_deserialize(a: number, b: number, c: number): void;
export function fheint128_safe_serialize(a: number, b: number, c: number): void;
export function fheint128_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint128_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint128_decompress(a: number, b: number): void;
export function compressedfheint128_serialize(a: number, b: number): void;
export function compressedfheint128_deserialize(a: number, b: number, c: number): void;
export function compressedfheint128_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint128_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint160_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint160_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint160_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint160_decrypt(a: number, b: number, c: number): void;
export function fheint160_serialize(a: number, b: number): void;
export function fheint160_deserialize(a: number, b: number, c: number): void;
export function fheint160_safe_serialize(a: number, b: number, c: number): void;
export function fheint160_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint160_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint160_decompress(a: number, b: number): void;
export function compressedfheint160_serialize(a: number, b: number): void;
export function compressedfheint160_deserialize(a: number, b: number, c: number): void;
export function compressedfheint160_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint160_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint256_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint256_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint256_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint256_serialize(a: number, b: number): void;
export function fheint256_deserialize(a: number, b: number, c: number): void;
export function fheint256_safe_serialize(a: number, b: number, c: number): void;
export function fheint256_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint256_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint256_decompress(a: number, b: number): void;
export function compressedfheint256_serialize(a: number, b: number): void;
export function compressedfheint256_deserialize(a: number, b: number, c: number): void;
export function compressedfheint256_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint256_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function __wbg_fhebool_free(a: number, b: number): void;
export function fhebool_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fhebool_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fhebool_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fhebool_decrypt(a: number, b: number, c: number): void;
export function fhebool_serialize(a: number, b: number): void;
export function fhebool_deserialize(a: number, b: number, c: number): void;
export function fhebool_safe_serialize(a: number, b: number, c: number): void;
export function fhebool_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function __wbg_compressedfhebool_free(a: number, b: number): void;
export function compressedfhebool_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfhebool_decompress(a: number, b: number): void;
export function compressedfhebool_serialize(a: number, b: number): void;
export function compressedfhebool_deserialize(a: number, b: number, c: number): void;
export function compressedfhebool_safe_serialize(a: number, b: number, c: number): void;
export function compressedfhebool_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint2_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint2_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint2_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint2_decrypt(a: number, b: number, c: number): void;
export function fheuint2_serialize(a: number, b: number): void;
export function fheuint2_deserialize(a: number, b: number, c: number): void;
export function fheuint2_safe_serialize(a: number, b: number, c: number): void;
export function fheuint2_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint2_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint2_decompress(a: number, b: number): void;
export function compressedfheuint2_serialize(a: number, b: number): void;
export function compressedfheuint2_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint2_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint2_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint4_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint4_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint4_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint4_decrypt(a: number, b: number, c: number): void;
export function fheuint4_serialize(a: number, b: number): void;
export function fheuint4_deserialize(a: number, b: number, c: number): void;
export function fheuint4_safe_serialize(a: number, b: number, c: number): void;
export function fheuint4_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint4_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint4_decompress(a: number, b: number): void;
export function compressedfheuint4_serialize(a: number, b: number): void;
export function compressedfheuint4_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint4_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint4_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint6_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint6_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint6_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint6_decrypt(a: number, b: number, c: number): void;
export function fheuint6_serialize(a: number, b: number): void;
export function fheuint6_deserialize(a: number, b: number, c: number): void;
export function fheuint6_safe_serialize(a: number, b: number, c: number): void;
export function fheuint6_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint6_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint6_decompress(a: number, b: number): void;
export function compressedfheuint6_serialize(a: number, b: number): void;
export function compressedfheuint6_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint6_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint6_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint8_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint8_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint8_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint8_decrypt(a: number, b: number, c: number): void;
export function fheuint8_serialize(a: number, b: number): void;
export function fheuint8_deserialize(a: number, b: number, c: number): void;
export function fheuint8_safe_serialize(a: number, b: number, c: number): void;
export function fheuint8_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint8_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint8_decompress(a: number, b: number): void;
export function compressedfheuint8_serialize(a: number, b: number): void;
export function compressedfheuint8_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint8_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint8_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint10_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint10_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint10_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint10_decrypt(a: number, b: number, c: number): void;
export function fheuint10_serialize(a: number, b: number): void;
export function fheuint10_deserialize(a: number, b: number, c: number): void;
export function fheuint10_safe_serialize(a: number, b: number, c: number): void;
export function fheuint10_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint10_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint10_decompress(a: number, b: number): void;
export function compressedfheuint10_serialize(a: number, b: number): void;
export function compressedfheuint10_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint10_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint10_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint12_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint12_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint12_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint12_decrypt(a: number, b: number, c: number): void;
export function fheuint12_serialize(a: number, b: number): void;
export function fheuint12_deserialize(a: number, b: number, c: number): void;
export function fheuint12_safe_serialize(a: number, b: number, c: number): void;
export function fheuint12_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint12_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint12_decompress(a: number, b: number): void;
export function compressedfheuint12_serialize(a: number, b: number): void;
export function compressedfheuint12_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint12_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint12_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint14_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint14_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint14_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint14_decrypt(a: number, b: number, c: number): void;
export function fheuint14_serialize(a: number, b: number): void;
export function fheuint14_deserialize(a: number, b: number, c: number): void;
export function fheuint14_safe_serialize(a: number, b: number, c: number): void;
export function fheuint14_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint14_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint14_decompress(a: number, b: number): void;
export function compressedfheuint14_serialize(a: number, b: number): void;
export function compressedfheuint14_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint14_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint14_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint16_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint16_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint16_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint16_decrypt(a: number, b: number, c: number): void;
export function fheuint16_serialize(a: number, b: number): void;
export function fheuint16_deserialize(a: number, b: number, c: number): void;
export function fheuint16_safe_serialize(a: number, b: number, c: number): void;
export function fheuint16_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint16_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint16_decompress(a: number, b: number): void;
export function compressedfheuint16_serialize(a: number, b: number): void;
export function compressedfheuint16_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint16_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint16_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint32_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint32_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint32_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint32_decrypt(a: number, b: number, c: number): void;
export function fheuint32_serialize(a: number, b: number): void;
export function fheuint32_deserialize(a: number, b: number, c: number): void;
export function fheuint32_safe_serialize(a: number, b: number, c: number): void;
export function fheuint32_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint32_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint32_decompress(a: number, b: number): void;
export function compressedfheuint32_serialize(a: number, b: number): void;
export function compressedfheuint32_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint32_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint32_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheuint64_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheuint64_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheuint64_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheuint64_decrypt(a: number, b: number, c: number): void;
export function fheuint64_serialize(a: number, b: number): void;
export function fheuint64_deserialize(a: number, b: number, c: number): void;
export function fheuint64_safe_serialize(a: number, b: number, c: number): void;
export function fheuint64_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheuint64_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheuint64_decompress(a: number, b: number): void;
export function compressedfheuint64_serialize(a: number, b: number): void;
export function compressedfheuint64_deserialize(a: number, b: number, c: number): void;
export function compressedfheuint64_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheuint64_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint2_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint2_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint2_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint2_decrypt(a: number, b: number, c: number): void;
export function fheint2_serialize(a: number, b: number): void;
export function fheint2_deserialize(a: number, b: number, c: number): void;
export function fheint2_safe_serialize(a: number, b: number, c: number): void;
export function fheint2_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint2_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint2_decompress(a: number, b: number): void;
export function compressedfheint2_serialize(a: number, b: number): void;
export function compressedfheint2_deserialize(a: number, b: number, c: number): void;
export function compressedfheint2_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint2_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint4_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint4_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint4_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint4_serialize(a: number, b: number): void;
export function fheint4_deserialize(a: number, b: number, c: number): void;
export function fheint4_safe_serialize(a: number, b: number, c: number): void;
export function fheint4_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint4_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint4_decompress(a: number, b: number): void;
export function compressedfheint4_serialize(a: number, b: number): void;
export function compressedfheint4_deserialize(a: number, b: number, c: number): void;
export function compressedfheint4_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint4_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint6_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint6_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint6_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint6_serialize(a: number, b: number): void;
export function fheint6_deserialize(a: number, b: number, c: number): void;
export function fheint6_safe_serialize(a: number, b: number, c: number): void;
export function fheint6_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint6_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint6_decompress(a: number, b: number): void;
export function compressedfheint6_serialize(a: number, b: number): void;
export function compressedfheint6_deserialize(a: number, b: number, c: number): void;
export function compressedfheint6_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint6_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint8_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint8_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint8_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint8_serialize(a: number, b: number): void;
export function fheint8_deserialize(a: number, b: number, c: number): void;
export function fheint8_safe_serialize(a: number, b: number, c: number): void;
export function fheint8_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint8_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint8_decompress(a: number, b: number): void;
export function compressedfheint8_serialize(a: number, b: number): void;
export function compressedfheint8_deserialize(a: number, b: number, c: number): void;
export function compressedfheint8_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint8_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function __wbg_fheint10_free(a: number, b: number): void;
export function fheint10_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint10_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint10_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint10_decrypt(a: number, b: number, c: number): void;
export function fheint10_serialize(a: number, b: number): void;
export function fheint10_deserialize(a: number, b: number, c: number): void;
export function fheint10_safe_serialize(a: number, b: number, c: number): void;
export function fheint10_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function __wbg_compressedfheint10_free(a: number, b: number): void;
export function compressedfheint10_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint10_decompress(a: number, b: number): void;
export function compressedfheint10_serialize(a: number, b: number): void;
export function compressedfheint10_deserialize(a: number, b: number, c: number): void;
export function compressedfheint10_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint10_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint12_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint12_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint12_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint12_serialize(a: number, b: number): void;
export function fheint12_deserialize(a: number, b: number, c: number): void;
export function fheint12_safe_serialize(a: number, b: number, c: number): void;
export function fheint12_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint12_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint12_decompress(a: number, b: number): void;
export function compressedfheint12_serialize(a: number, b: number): void;
export function compressedfheint12_deserialize(a: number, b: number, c: number): void;
export function compressedfheint12_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint12_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint14_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint14_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint14_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint14_serialize(a: number, b: number): void;
export function fheint14_deserialize(a: number, b: number, c: number): void;
export function fheint14_safe_serialize(a: number, b: number, c: number): void;
export function fheint14_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint14_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint14_decompress(a: number, b: number): void;
export function compressedfheint14_serialize(a: number, b: number): void;
export function compressedfheint14_deserialize(a: number, b: number, c: number): void;
export function compressedfheint14_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint14_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint16_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint16_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint16_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint16_serialize(a: number, b: number): void;
export function fheint16_deserialize(a: number, b: number, c: number): void;
export function fheint16_safe_serialize(a: number, b: number, c: number): void;
export function fheint16_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint16_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint16_decompress(a: number, b: number): void;
export function compressedfheint16_serialize(a: number, b: number): void;
export function compressedfheint16_deserialize(a: number, b: number, c: number): void;
export function compressedfheint16_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint16_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint32_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint32_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint32_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint32_decrypt(a: number, b: number, c: number): void;
export function fheint32_serialize(a: number, b: number): void;
export function fheint32_deserialize(a: number, b: number, c: number): void;
export function fheint32_safe_serialize(a: number, b: number, c: number): void;
export function fheint32_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint32_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint32_decompress(a: number, b: number): void;
export function compressedfheint32_serialize(a: number, b: number): void;
export function compressedfheint32_deserialize(a: number, b: number, c: number): void;
export function compressedfheint32_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint32_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function fheint64_encrypt_with_client_key(a: number, b: number, c: number): void;
export function fheint64_encrypt_with_public_key(a: number, b: number, c: number): void;
export function fheint64_encrypt_with_compressed_public_key(a: number, b: number, c: number): void;
export function fheint64_decrypt(a: number, b: number, c: number): void;
export function fheint64_serialize(a: number, b: number): void;
export function fheint64_deserialize(a: number, b: number, c: number): void;
export function fheint64_safe_serialize(a: number, b: number, c: number): void;
export function fheint64_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compressedfheint64_encrypt_with_client_key(a: number, b: number, c: number): void;
export function compressedfheint64_decompress(a: number, b: number): void;
export function compressedfheint64_serialize(a: number, b: number): void;
export function compressedfheint64_deserialize(a: number, b: number, c: number): void;
export function compressedfheint64_safe_serialize(a: number, b: number, c: number): void;
export function compressedfheint64_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function __wbg_compactciphertextlistbuilder_free(a: number, b: number): void;
export function __wbg_compactciphertextlistexpander_free(a: number, b: number): void;
export function __wbg_compactciphertextlist_free(a: number, b: number): void;
export function compactciphertextlist_builder(a: number, b: number): void;
export function compactciphertextlist_len(a: number): number;
export function compactciphertextlist_is_empty(a: number): number;
export function compactciphertextlist_get_kind_of(a: number, b: number): number;
export function compactciphertextlist_expand(a: number, b: number): void;
export function compactciphertextlist_serialize(a: number, b: number): void;
export function compactciphertextlist_deserialize(a: number, b: number, c: number): void;
export function compactciphertextlist_safe_serialize(a: number, b: number, c: number): void;
export function compactciphertextlist_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function compactciphertextlistbuilder_push_u2(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u4(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u6(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u8(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u10(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u12(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u14(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u16(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u32(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u64(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i2(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i4(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i6(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i8(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i10(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i12(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i14(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i16(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i32(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i64(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u128(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u160(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u256(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u512(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u1024(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_u2048(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i128(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i160(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_i256(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_push_boolean(a: number, b: number, c: number): void;
export function compactciphertextlistbuilder_build(a: number, b: number): void;
export function compactciphertextlistbuilder_build_packed(a: number, b: number): void;
export function compactciphertextlistexpander_get_uint2(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint4(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint6(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint8(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint10(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint12(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint14(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint16(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint32(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint64(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint128(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint160(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint256(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint512(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint1024(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_uint2048(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int2(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int4(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int6(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int8(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int10(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int12(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int14(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int16(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int32(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int64(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int128(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int160(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_int256(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_get_bool(a: number, b: number, c: number): void;
export function compactciphertextlistexpander_len(a: number): number;
export function compactciphertextlistexpander_is_empty(a: number): number;
export function compactciphertextlistexpander_get_kind_of(a: number, b: number): number;
export function init_panic_hook(): void;
export function __wbg_tfheclientkey_free(a: number, b: number): void;
export function tfheclientkey_generate(a: number, b: number): void;
export function tfheclientkey_generate_with_seed(a: number, b: number, c: number): void;
export function tfheclientkey_serialize(a: number, b: number): void;
export function tfheclientkey_deserialize(a: number, b: number, c: number): void;
export function tfheclientkey_safe_serialize(a: number, b: number, c: number): void;
export function tfheclientkey_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function __wbg_tfhecompressedserverkey_free(a: number, b: number): void;
export function tfhecompressedserverkey_new(a: number, b: number): void;
export function tfhecompressedserverkey_serialize(a: number, b: number): void;
export function tfhecompressedserverkey_deserialize(a: number, b: number, c: number): void;
export function tfhecompressedserverkey_safe_serialize(a: number, b: number, c: number): void;
export function tfhecompressedserverkey_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function __wbg_tfheserverkey_free(a: number, b: number): void;
export function tfheserverkey_new(a: number, b: number): void;
export function set_server_key(a: number, b: number): void;
export function __wbg_tfhepublickey_free(a: number, b: number): void;
export function tfhepublickey_new(a: number, b: number): void;
export function tfhepublickey_serialize(a: number, b: number): void;
export function tfhepublickey_deserialize(a: number, b: number, c: number): void;
export function tfhepublickey_safe_serialize(a: number, b: number, c: number): void;
export function tfhepublickey_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function __wbg_tfhecompressedpublickey_free(a: number, b: number): void;
export function tfhecompressedpublickey_new(a: number, b: number): void;
export function tfhecompressedpublickey_decompress(a: number, b: number): void;
export function tfhecompressedpublickey_serialize(a: number, b: number): void;
export function tfhecompressedpublickey_deserialize(a: number, b: number, c: number): void;
export function tfhecompressedpublickey_safe_serialize(a: number, b: number, c: number): void;
export function tfhecompressedpublickey_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function __wbg_tfhecompactpublickey_free(a: number, b: number): void;
export function tfhecompactpublickey_new(a: number, b: number): void;
export function tfhecompactpublickey_serialize(a: number, b: number): void;
export function tfhecompactpublickey_deserialize(a: number, b: number, c: number): void;
export function tfhecompactpublickey_safe_serialize(a: number, b: number, c: number): void;
export function tfhecompactpublickey_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function tfhecompactpublickey_safe_deserialize_conformant(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_tfhecompressedcompactpublickey_free(a: number, b: number): void;
export function tfhecompressedcompactpublickey_new(a: number, b: number): void;
export function tfhecompressedcompactpublickey_serialize(a: number, b: number): void;
export function tfhecompressedcompactpublickey_deserialize(a: number, b: number, c: number): void;
export function tfhecompressedcompactpublickey_decompress(a: number, b: number): void;
export function tfhecompressedcompactpublickey_safe_serialize(a: number, b: number, c: number): void;
export function tfhecompressedcompactpublickey_safe_deserialize(a: number, b: number, c: number, d: number): void;
export function tfhecompressedcompactpublickey_safe_deserialize_conformant(a: number, b: number, c: number, d: number, e: number): void;
export function fheint4_decrypt(a: number, b: number, c: number): void;
export function fheint6_decrypt(a: number, b: number, c: number): void;
export function fheint8_decrypt(a: number, b: number, c: number): void;
export function fheint12_decrypt(a: number, b: number, c: number): void;
export function fheint14_decrypt(a: number, b: number, c: number): void;
export function fheint16_decrypt(a: number, b: number, c: number): void;
export function fheint256_decrypt(a: number, b: number, c: number): void;
export function __wbg_fheuint160_free(a: number, b: number): void;
export function __wbg_fheuint256_free(a: number, b: number): void;
export function __wbg_fheuint512_free(a: number, b: number): void;
export function __wbg_fheuint128_free(a: number, b: number): void;
export function __wbg_fheuint2048_free(a: number, b: number): void;
export function __wbg_fheuint1024_free(a: number, b: number): void;
export function __wbg_fheint160_free(a: number, b: number): void;
export function __wbg_fheint256_free(a: number, b: number): void;
export function __wbg_fheuint2_free(a: number, b: number): void;
export function __wbg_fheuint4_free(a: number, b: number): void;
export function __wbg_fheuint6_free(a: number, b: number): void;
export function __wbg_fheuint8_free(a: number, b: number): void;
export function __wbg_fheuint10_free(a: number, b: number): void;
export function __wbg_fheuint12_free(a: number, b: number): void;
export function __wbg_fheuint14_free(a: number, b: number): void;
export function __wbg_fheuint16_free(a: number, b: number): void;
export function __wbg_fheuint32_free(a: number, b: number): void;
export function __wbg_fheuint64_free(a: number, b: number): void;
export function __wbg_fheint2_free(a: number, b: number): void;
export function __wbg_fheint4_free(a: number, b: number): void;
export function __wbg_fheint6_free(a: number, b: number): void;
export function __wbg_fheint8_free(a: number, b: number): void;
export function __wbg_fheint128_free(a: number, b: number): void;
export function __wbg_fheint12_free(a: number, b: number): void;
export function __wbg_fheint14_free(a: number, b: number): void;
export function __wbg_fheint16_free(a: number, b: number): void;
export function __wbg_fheint32_free(a: number, b: number): void;
export function __wbg_fheint64_free(a: number, b: number): void;
export function tfheconfigbuilder_default_with_big_encryption(): number;
export function __wbg_compressedfheuint160_free(a: number, b: number): void;
export function __wbg_compressedfheuint256_free(a: number, b: number): void;
export function __wbg_compressedfheuint512_free(a: number, b: number): void;
export function __wbg_compressedfheuint128_free(a: number, b: number): void;
export function __wbg_compressedfheuint2048_free(a: number, b: number): void;
export function __wbg_compressedfheuint1024_free(a: number, b: number): void;
export function __wbg_compressedfheint160_free(a: number, b: number): void;
export function __wbg_compressedfheint256_free(a: number, b: number): void;
export function __wbg_compressedfheuint2_free(a: number, b: number): void;
export function __wbg_compressedfheuint4_free(a: number, b: number): void;
export function __wbg_compressedfheuint6_free(a: number, b: number): void;
export function __wbg_compressedfheuint8_free(a: number, b: number): void;
export function __wbg_compressedfheuint10_free(a: number, b: number): void;
export function __wbg_compressedfheuint12_free(a: number, b: number): void;
export function __wbg_compressedfheuint14_free(a: number, b: number): void;
export function __wbg_compressedfheuint16_free(a: number, b: number): void;
export function __wbg_compressedfheuint32_free(a: number, b: number): void;
export function __wbg_compressedfheuint64_free(a: number, b: number): void;
export function __wbg_compressedfheint2_free(a: number, b: number): void;
export function __wbg_compressedfheint4_free(a: number, b: number): void;
export function __wbg_compressedfheint6_free(a: number, b: number): void;
export function __wbg_compressedfheint8_free(a: number, b: number): void;
export function __wbg_compressedfheint128_free(a: number, b: number): void;
export function __wbg_compressedfheint12_free(a: number, b: number): void;
export function __wbg_compressedfheint14_free(a: number, b: number): void;
export function __wbg_compressedfheint16_free(a: number, b: number): void;
export function __wbg_compressedfheint32_free(a: number, b: number): void;
export function __wbg_compressedfheint64_free(a: number, b: number): void;
export function __wbg_tfheconfigbuilder_free(a: number, b: number): void;
export function fheuint256_decrypt(a: number, b: number, c: number): void;
export function __wbg_shortintciphertext_free(a: number, b: number): void;
export function __wbg_shortintclientkey_free(a: number, b: number): void;
export function __wbg_shortintpublickey_free(a: number, b: number): void;
export function __wbg_shortintcompressedpublickey_free(a: number, b: number): void;
export function __wbg_shortintcompressedserverkey_free(a: number, b: number): void;
export function __wbg_shortint_free(a: number, b: number): void;
export function __wbg_shortintparameters_free(a: number, b: number): void;
export function __wbg_shortintcompactpublickeyencryptionparameters_free(a: number, b: number): void;
export function shortintparameters_lwe_dimension(a: number): number;
export function shortintparameters_set_lwe_dimension(a: number, b: number): void;
export function shortintparameters_glwe_dimension(a: number): number;
export function shortintparameters_set_glwe_dimension(a: number, b: number): void;
export function shortintparameters_polynomial_size(a: number): number;
export function shortintparameters_set_polynomial_size(a: number, b: number): void;
export function shortintparameters_set_lwe_noise_distribution(a: number, b: number): void;
export function shortintparameters_glwe_noise_distribution(a: number): number;
export function shortintparameters_set_glwe_noise_distribution(a: number, b: number): void;
export function shortintparameters_pbs_base_log(a: number): number;
export function shortintparameters_set_pbs_base_log(a: number, b: number): void;
export function shortintparameters_pbs_level(a: number): number;
export function shortintparameters_set_pbs_level(a: number, b: number): void;
export function shortintparameters_ks_base_log(a: number): number;
export function shortintparameters_set_ks_base_log(a: number, b: number): void;
export function shortintparameters_ks_level(a: number): number;
export function shortintparameters_set_ks_level(a: number, b: number): void;
export function shortintparameters_message_modulus(a: number): number;
export function shortintparameters_set_message_modulus(a: number, b: number): void;
export function shortintparameters_carry_modulus(a: number): number;
export function shortintparameters_set_carry_modulus(a: number, b: number): void;
export function shortintparameters_encryption_key_choice(a: number): number;
export function shortintparameters_set_encryption_key_choice(a: number, b: number): void;
export function __wbg_shortintnoisedistribution_free(a: number, b: number): void;
export function shortintcompactpublickeyencryptionparameters_new(a: number): number;
export function shortintcompactpublickeyencryptionparameters_new_parameters(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function shortintparameters_new(a: number): number;
export function shortint_get_parameters(a: number, b: number, c: number): void;
export function shortint_get_parameters_small(a: number, b: number, c: number): void;
export function shortint_new_gaussian_from_std_dev(a: number): number;
export function shortint_try_new_t_uniform(a: number, b: number): void;
export function shortint_new_parameters(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number): number;
export function shortint_new_client_key_from_seed_and_parameters(a: number, b: number, c: number): number;
export function shortint_new_client_key(a: number): number;
export function shortint_new_public_key(a: number): number;
export function shortint_new_compressed_public_key(a: number): number;
export function shortint_new_compressed_server_key(a: number): number;
export function shortint_encrypt(a: number, b: number): number;
export function shortint_encrypt_compressed(a: number, b: number): number;
export function shortint_decompress_ciphertext(a: number): number;
export function shortint_encrypt_with_public_key(a: number, b: number): number;
export function shortint_encrypt_with_compressed_public_key(a: number, b: number): number;
export function shortint_decrypt(a: number, b: number): number;
export function shortint_serialize_ciphertext(a: number, b: number): void;
export function shortint_deserialize_ciphertext(a: number, b: number, c: number): void;
export function shortint_serialize_compressed_ciphertext(a: number, b: number): void;
export function shortint_deserialize_compressed_ciphertext(a: number, b: number, c: number): void;
export function shortint_serialize_client_key(a: number, b: number): void;
export function shortint_deserialize_client_key(a: number, b: number, c: number): void;
export function shortint_serialize_public_key(a: number, b: number): void;
export function shortint_deserialize_public_key(a: number, b: number, c: number): void;
export function shortint_serialize_compressed_public_key(a: number, b: number): void;
export function shortint_deserialize_compressed_public_key(a: number, b: number, c: number): void;
export function shortint_serialize_compressed_server_key(a: number, b: number): void;
export function shortint_deserialize_compressed_server_key(a: number, b: number, c: number): void;
export function shortintparameters_lwe_noise_distribution(a: number): number;
export function __wbg_shortintcompressedciphertext_free(a: number, b: number): void;
export function __wbg_tfhe_free(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
